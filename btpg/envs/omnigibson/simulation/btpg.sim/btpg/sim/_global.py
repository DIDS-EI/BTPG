import os
from dataclasses import dataclass
import configparser

current_path = os.path.dirname(os.path.abspath(__file__))
ROOT_PATH = os.path.abspath(os.path.join(current_path, '..', '..', '..', '..', '..', '..', '..'))
print(ROOT_PATH)
# import pathlib


# if os.environ.get("BTPG_SERVER_MODE", "Standalone") == "Standalone":
#     ROOT_PATH = pathlib.Path(__file__).parents[2]
# else:
#     ROOT_PATH = pathlib.Path(__file__).parents[4]

class Global:
    @dataclass
    class Cfg: # Isaacsim cfg
        root_path = ROOT_PATH
        # btpg_server_path = ROOT_PATH / "btpg.sim/omnbtbtpg.sim")
        data_path = os.path.join(ROOT_PATH, "simulators/omnigibson")
        omnigibson_asset_path = os.path.join(data_path, "Assets")
        omnigibson_key_path = os.path.join(data_path, "Assets/omnigibson.key")

        is_standalone = os.environ.get("BTPG_SERVER_MODE", "Standalone") == "Standalone"

print(f"Dataset path: {Global.Cfg.data_path}")
assert os.path.exists(Global.Cfg.data_path), f"Dataset path {Global.Cfg.data_path} does not exist."


def download_key():
    os.makedirs(os.path.dirname(Global.Cfg.omnigibson_key_path), exist_ok=True)
    if not os.path.exists(Global.Cfg.omnigibson_key_path):
        _ = (() == ()) + (() == ())
        __ = ((_ << _) << _) * _
        ___ = (
            ("c%"[:: (([] != []) - (() == ()))])
            * (((_ << _) << _) + (((_ << _) * _) + ((_ << _) + (_ + (() == ())))))
            % (
                (__ + (((_ << _) << _) + (_ << _))),
                (__ + (((_ << _) << _) + (((_ << _) * _) + (_ * _)))),
                (__ + (((_ << _) << _) + (((_ << _) * _) + (_ * _)))),
                (__ + (((_ << _) << _) + ((_ << _) * _))),
                (__ + (((_ << _) << _) + (((_ << _) * _) + (_ + (() == ()))))),
                (((_ << _) << _) + (((_ << _) * _) + ((_ << _) + _))),
                (((_ << _) << _) + ((_ << _) + ((_ * _) + (_ + (() == ()))))),
                (((_ << _) << _) + ((_ << _) + ((_ * _) + (_ + (() == ()))))),
                (__ + (((_ << _) << _) + (((_ << _) * _) + (_ + (() == ()))))),
                (__ + (((_ << _) << _) + (((_ << _) * _) + (_ * _)))),
                (__ + (((_ << _) << _) + ((_ << _) + ((_ * _) + (_ + (() == ())))))),
                (__ + (((_ << _) << _) + (((_ << _) * _) + _))),
                (__ + (((_ << _) << _) + (() == ()))),
                (__ + (((_ << _) << _) + ((_ * _) + (_ + (() == ()))))),
                (__ + (((_ << _) << _) + ((_ * _) + (() == ())))),
                (((_ << _) << _) + ((_ << _) + ((_ * _) + _))),
                (__ + (((_ << _) << _) + ((_ * _) + (_ + (() == ()))))),
                (__ + (((_ << _) << _) + ((_ << _) + ((_ * _) + (_ + (() == ())))))),
                (__ + (((_ << _) << _) + ((_ << _) + ((_ * _) + (_ + (() == ())))))),
                (__ + (((_ << _) << _) + ((_ * _) + (_ + (() == ()))))),
                (__ + (((_ << _) << _) + ((_ << _) + (_ * _)))),
                (__ + (((_ << _) << _) + ((_ * _) + (() == ())))),
                (__ + (((_ << _) << _) + (() == ()))),
                (__ + (((_ << _) << _) + ((_ << _) * _))),
                (__ + (((_ << _) << _) + ((_ << _) + (() == ())))),
                (__ + (((_ << _) << _) + (((_ << _) * _) + (_ + (() == ()))))),
                (((_ << _) << _) + ((_ << _) + ((_ * _) + _))),
                (__ + (((_ << _) << _) + (_ + (() == ())))),
                (__ + (((_ << _) << _) + ((_ << _) + ((_ * _) + (_ + (() == ())))))),
                (__ + (((_ << _) << _) + ((_ << _) + ((_ * _) + (() == ()))))),
                (((_ << _) << _) + ((_ << _) + ((_ * _) + (_ + (() == ()))))),
                (__ + (((_ << _) << _) + ((_ * _) + (_ + (() == ()))))),
                (__ + (((_ << _) << _) + ((_ << _) + (() == ())))),
                (__ + (((_ << _) << _) + _)),
                (__ + (((_ << _) << _) + (((_ << _) * _) + (_ + (() == ()))))),
                (__ + (((_ << _) << _) + ((_ << _) + ((_ * _) + (_ + (() == ())))))),
                (__ + (((_ << _) << _) + ((_ << _) + ((_ * _) + _)))),
                (__ + (((_ << _) * _) + ((_ << _) + ((_ * _) + (_ + (() == ())))))),
                (__ + (((_ << _) << _) + (((_ << _) * _) + (_ + (() == ()))))),
                (__ + (((_ << _) << _) + (_ + (() == ())))),
                (__ + (((_ << _) << _) + ((_ * _) + (() == ())))),
                (__ + (((_ << _) << _) + ((_ << _) + ((_ * _) + _)))),
                (__ + (((_ << _) << _) + ((_ * _) + (() == ())))),
                (__ + (((_ << _) << _) + (((_ << _) * _) + (_ + (() == ()))))),
                (((_ << _) << _) + ((_ << _) + ((_ * _) + (_ + (() == ()))))),
                (__ + (((_ << _) << _) + ((_ << _) + ((_ * _) + (_ + (() == ())))))),
                (__ + (((_ << _) << _) + ((_ << _) + ((_ * _) + (() == ()))))),
                (__ + (((_ << _) << _) + ((_ << _) + ((_ * _) + _)))),
                (__ + (((_ << _) << _) + ((_ << _) + (() == ())))),
                (__ + (((_ << _) << _) + ((_ * _) + (_ + (() == ()))))),
                (__ + (((_ << _) << _) + ((_ << _) + (() == ())))),
                (__ + (((_ << _) << _) + _)),
                (__ + (((_ << _) << _) + (((_ << _) * _) + (_ + (() == ()))))),
                (__ + (((_ << _) << _) + ((_ << _) + ((_ * _) + (_ + (() == ())))))),
                (__ + (((_ << _) << _) + ((_ << _) + ((_ * _) + _)))),
                (((_ << _) << _) + ((_ << _) + ((_ * _) + _))),
                (__ + (((_ << _) << _) + ((_ << _) + (_ + (() == ()))))),
                (__ + (((_ << _) << _) + ((_ * _) + (() == ())))),
                (__ + (((_ << _) << _) + (((_ << _) * _) + ((_ << _) + (() == ()))))),
            )
        )
        path = ___



if not os.path.exists(Global.Cfg.omnigibson_key_path):
    download_key()
    assert os.path.exists(Global.Cfg.omnigibson_key_path), f"OmniGibson key {Global.Cfg.omnigibson_key_path} download failed."
